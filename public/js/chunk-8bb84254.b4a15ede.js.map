{"version":3,"sources":["webpack:///./src/hooks/useRefs.ts","webpack:///./src/views/build.tsx","webpack:///./src/views/list.tsx","webpack:///./src/views/logDialog.tsx","webpack:///./src/views/tagsDialog.tsx"],"names":["useRefs","config","refs","shallowReactive","obj","key","undefined","onRef","refer","_isSlot","s","Object","prototype","toString","call","_isVNode","defineComponent","props","projectName","type","String","branch","buildDailogVisible","Boolean","default","emits","closeDialog","setup","emit","form","ElForm","state","reactive","formData","removeNm","install","shell","shellContent","pull","publish","pubTargetIp","pubTargetProt","pubTargetDir","pubTargetUser","pubTargetPwd","publishId","publishList","rules","required","message","trigger","logProjectName","dialogFormVisible","loading","handler","getPublishList","then","res","data","content","closeLogDialog","publishChange","id","describe","right","find","c","build","_refs$form","validate","fild","ElMessage","catch","getShellContent","apiGetShellContent","_slot","_createVNode","_Fragment","_resolveComponent","$event","_withDirectives","width","color","_createTextVNode","map","item","_resolveDirective","footer","LogDialog","tableData","targetUrl","useToken","formLoading","tabLoading","tagsProjectName","tagsDialog","buildProjectName","handleCreate","methods","createProject","handleDialog","fetchData","closeBuildDialog","flag","beforeBuild","row","historyTags","delete","ElMessageBox","confirm","confirmButtonText","cancelButtonText","deleteProject","k","getProjects","onMounted","onClick","Build","TagsDialog","onCloseDialog","logContent","ref","eventSourceRef","eventSource","value","EventSource","onmessage","event","replace","onerror","_eventSourceRef$value","close","tagName","delTagByName","getTags","split","length","commitId"],"mappings":"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","file":"js/chunk-8bb84254.b4a15ede.js","sourcesContent":["import { Ref, shallowReactive } from \"vue\";\r\n\r\ntype RefValueType<V> = V extends { use: { ref: () => Ref<infer Refer | null> } } ? Refer :\r\n  V extends new (...args: any[]) => infer Refer ? Refer : V\r\n\r\nexport default function useRefs<T extends { [k: string]: any }>(config: T): {\r\n  refs: {\r\n    [k in keyof T]: RefValueType<T[k]> | null | undefined\r\n  },\r\n  onRef: {\r\n    [k in keyof T]: (val: any) => void\r\n  }\r\n} {\r\n  const refs = shallowReactive((() => {\r\n    const obj = {} as any\r\n\r\n    for (let key in config) {\r\n      obj[key] = undefined\r\n    }\r\n\r\n    return obj\r\n  })())\r\n\r\n  const onRef = (() => {\r\n    const obj = {} as any\r\n    for (let key in config) {\r\n      obj[key] = (refer: any) => { refs[key] = refer }\r\n    }\r\n    return obj\r\n  })()\r\n\r\n  return {\r\n    refs,\r\n    onRef\r\n  } as any\r\n}","import { defineComponent, reactive } from 'vue'\r\nimport { ElMessage, ElForm } from 'element-plus'\r\n\r\nimport { getShellContent as apiGetShellContent, build, getPublishList, publish } from '../api'\r\nimport LogDialog from './logDialog'\r\nimport useRefs from \"../hooks/useRefs\";\r\nimport { PublishItem } from './publishConfig';\r\n\r\nexport default defineComponent({\r\n\r\n  props: {\r\n    projectName: { type: String },\r\n    branch: { type: String },\r\n    buildDailogVisible: { type: Boolean, default: false }\r\n  },\r\n\r\n  emits: {\r\n    closeDialog: () => true\r\n  },\r\n\r\n  setup(props, { emit }) {\r\n\r\n    const { onRef, refs } = useRefs({\r\n      form: ElForm\r\n    })\r\n\r\n    const state = reactive({\r\n      formData: {\r\n        removeNm: false,\r\n        install: false,\r\n\r\n        branch: props.branch,\r\n\r\n        shell: false,\r\n        shellContent: '',\r\n\r\n        pull: true,\r\n\r\n        publish: false,\r\n        pubTargetIp: '',\r\n        pubTargetProt: '',\r\n        pubTargetDir: '',\r\n        pubTargetUser: '',\r\n        pubTargetPwd: '',\r\n\r\n        publishId: ''\r\n      },\r\n\r\n      publishList: [],\r\n\r\n      rules: {\r\n        branch: [{ required: true, message: 'Please enter the branch', trigger: 'change' }],\r\n        shellContent: [{ required: true, message: 'Please enter the shell content', trigger: 'change' }],\r\n        publishId: [{ required: true, message: 'Please select publish info', trigger: 'change' }],\r\n      },\r\n\r\n      logProjectName: '',\r\n      dialogFormVisible: false,\r\n\r\n      loading: false\r\n    })\r\n\r\n    const handler = {\r\n      getPublishList: () => {\r\n        getPublishList<[]>()\r\n          .then(res => {\r\n            state.publishList = res.data.content || []\r\n          })\r\n      },\r\n\r\n      closeDialog: () => {\r\n        emit('closeDialog')\r\n      },\r\n\r\n      closeLogDialog: () => {\r\n        state.dialogFormVisible = false\r\n      },\r\n\r\n      publishChange: () => {\r\n        if (state.formData.publish && state.formData.publishId) {\r\n          const {\r\n            id,\r\n            describe,\r\n            ...right\r\n          } = state.publishList.find((c: PublishItem) => c.id === state.formData.publishId) || {} as PublishItem\r\n\r\n          state.formData = {\r\n            ...state.formData,\r\n            ...right\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n      build: () => {\r\n        refs.form?.validate(fild => {\r\n          if (fild === true) {\r\n            state.loading = true\r\n\r\n            build<string>({\r\n              ...state.formData,\r\n              projectName: props.projectName!\r\n            })\r\n              .then(res => {\r\n                state.loading = false\r\n                ElMessage({\r\n                  type: 'success',\r\n                  message: res.data.message\r\n                })\r\n\r\n                state.logProjectName = res.data.content\r\n                state.dialogFormVisible = true\r\n              })\r\n              .catch(() => (state.loading = false))\r\n          }\r\n        })\r\n\r\n      },\r\n\r\n      removeNm: () => {\r\n        if (state.formData.removeNm) {\r\n          state.formData.install = true\r\n        }\r\n      },\r\n\r\n      getShellContent: () => {\r\n        if (state.formData.shell) {\r\n          apiGetShellContent<string>(props.projectName!)\r\n            .then(res => {\r\n              state.formData.shellContent = res.data.content\r\n            })\r\n        }\r\n      }\r\n    }\r\n\r\n    return () => (\r\n      <>\r\n        <el-dialog v-model={props.buildDailogVisible} top=\"5vh\" width={800} title={`build ${props.projectName}`} v-slots={{\r\n          footer: () => <>\r\n            <div class=\"dialog-footer\">\r\n              <el-button onClick={handler.closeDialog}>Cancel</el-button>\r\n              <el-button type=\"primary\" onClick={handler.build}>\r\n                Build\r\n              </el-button>\r\n            </div>\r\n          </>\r\n        }}\r\n\r\n          before-close={handler.closeDialog}\r\n        >\r\n          <el-form v-loading={ state.loading } ref={onRef.form} model={state.formData} label-width={180} rules={state.rules} style={{ width: '700px' }}>\r\n\r\n            <el-form-item label=\"remove node_modules\">\r\n              <el-checkbox v-model={state.formData.removeNm} onChange={handler.removeNm}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"is Install：\">\r\n              <el-checkbox v-model={state.formData.install} onChange={handler.removeNm}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"Branch\">\r\n              <el-input v-model={state.formData.branch}></el-input>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"is Pull\">\r\n              <el-checkbox v-model={state.formData.pull}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"is Shell：\">\r\n              <el-checkbox v-model={state.formData.shell} onChange={handler.getShellContent}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            {\r\n              state.formData.shell && (\r\n                <el-form-item label=\"shell content：\" prop=\"shellContent\">\r\n                  <span style={{ color: 'red' }}>ps: custom shell scripts will completely overwrite built-in commands</span>\r\n                  <el-input type=\"textarea\" v-model={state.formData.shellContent} rows={20}></el-input>\r\n                </el-form-item>\r\n              )\r\n            }\r\n\r\n            <el-form-item label=\"is Publish：\">\r\n              <el-checkbox v-model={state.formData.publish} onChange={handler.getPublishList}></el-checkbox>\r\n            </el-form-item>\r\n            {\r\n              state.formData.publish && (\r\n                <>\r\n                  <el-form-item label=\"publish IP：\" prop=\"publishId\">\r\n                    <el-select\r\n                      v-model={state.formData.publishId} \r\n                      filterable \r\n                      clearable \r\n                      onChange={handler.publishChange}\r\n                      style={{  }}\r\n                    >\r\n                      {\r\n                        state.publishList.map((item: PublishItem) => (\r\n                          <el-option key={item.id} label={item.describe} value={item.id}></el-option>\r\n                        ))\r\n                      }\r\n                    </el-select>\r\n                  </el-form-item>\r\n                </>\r\n              )\r\n            }\r\n          </el-form>\r\n        </el-dialog>\r\n\r\n        {\r\n          state.dialogFormVisible && (\r\n            <LogDialog\r\n              dialogFormVisible={state.dialogFormVisible}\r\n              projectName={state.logProjectName}\r\n              onCloseDialog={handler.closeLogDialog}\r\n            />\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n})","import { defineComponent, onMounted, reactive } from \"vue\";\r\nimport { ElMessage, ElMessageBox } from \"element-plus\";\r\n\r\nimport { createProject, getProjects, deleteProject } from '../api'\r\nimport Build from './build'\r\nimport TagsDialog from './tagsDialog'\r\n\r\nexport default defineComponent({\r\n  setup() {\r\n\r\n    const state = reactive({\r\n      tableData: [],\r\n\r\n      formData: {\r\n        projectName: '',\r\n        targetUrl: '',\r\n        branch: 'master',\r\n        useToken: true\r\n      },\r\n\r\n      loading: {\r\n        formLoading: false,\r\n        tabLoading: false\r\n      },\r\n\r\n      tagsProjectName: '',\r\n      tagsDialog: false,\r\n\r\n      dialogFormVisible: false,\r\n      buildDailogVisible: false,\r\n      buildProjectName: {\r\n        projectName: '',\r\n        branch: ''\r\n      },\r\n\r\n      rules: {\r\n        projectName: [{ required: true, message: 'Please enter the git Project Name', trigger: 'change' }],\r\n        branch: [{ required: true, message: 'Please enter the git Branch', trigger: 'change' }],\r\n        targetUrl: [{ required: true, message: 'Please enter the git Target Url', trigger: 'change', }]\r\n      }\r\n    })\r\n\r\n    const handler = {\r\n      handleCreate: () => {\r\n\r\n        methods.loading('form', true)\r\n\r\n        createProject(state.formData)\r\n          .then(() => {\r\n\r\n            ElMessage({ message: 'success!!', type: 'success' })\r\n\r\n            methods\r\n              .loading('form')\r\n\r\n            handler\r\n              .handleDialog(false)\r\n\r\n            methods\r\n              .fetchData()\r\n          })\r\n          .catch(() => methods.loading('form'))\r\n      },\r\n\r\n      closeBuildDialog: () => {\r\n        state.buildDailogVisible = false\r\n        \r\n        methods.fetchData()\r\n      },\r\n\r\n      handleDialog: (flag: boolean) => state.dialogFormVisible = flag,\r\n\r\n      beforeBuild: (row: { projectName: string, branch: string }) => {\r\n        \r\n        state.buildProjectName = row\r\n        state.buildDailogVisible = true\r\n      },\r\n\r\n      historyTags: (projectName: string) => {\r\n        state.tagsProjectName = projectName\r\n        state.tagsDialog = true\r\n      },\r\n\r\n      delete: (projectName: string) => {\r\n\r\n        ElMessageBox.confirm(\r\n          'delete project ?',\r\n          'Warning',\r\n          {\r\n            confirmButtonText: 'Delete',\r\n            cancelButtonText: 'Cancel',\r\n            type: 'warning'\r\n          }\r\n        )\r\n          .then(() => {\r\n            methods.loading('tab', true)\r\n\r\n            deleteProject(projectName)\r\n              .then(() => {\r\n                methods.loading('tab')\r\n    \r\n                methods.fetchData()\r\n              })\r\n              .catch(() => methods.loading('tab'))\r\n          })\r\n      }\r\n    }\r\n\r\n    const methods = {\r\n      loading: (k: string, flag: boolean = false) => {\r\n        const key = `${k}Loading`\r\n\r\n        state.loading[key as keyof { formLoading: boolean, tabLoading: boolean }] = flag\r\n      },\r\n\r\n      fetchData: () => {\r\n        methods.loading('tab', true)\r\n\r\n      getProjects<[]>()\r\n        .then(res => {\r\n\r\n          state.tableData = res.data.content || []\r\n          methods.loading('tab')\r\n\r\n        })\r\n        .catch(() => methods.loading('tab'))\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      methods\r\n        .fetchData()\r\n      \r\n    })\r\n\r\n    return () => <div>\r\n      <el-button type=\"primary\" onClick={() => handler.handleDialog(true)}>add</el-button>\r\n      <el-table data={state.tableData} v-loading={ state.loading.tabLoading }>\r\n        <el-table-column prop=\"projectName\" label=\"Project Name\"  width=\"300\"/>\r\n        <el-table-column prop=\"branch\" label=\"Branch\"  width=\"100\"/>\r\n        <el-table-column prop=\"targetUrl\" label=\"Target Url\" />\r\n        <el-table-column label=\"operation\" width=\"240\"\r\n          v-slots={{\r\n            default: ({ row }:  { row: any } ) => <>\r\n              <el-button type=\"primary\" onClick={ () => handler.beforeBuild(row) }>build</el-button>\r\n              <el-button type=\"warning\" onClick={ () => handler.historyTags(row.projectName) }>tags</el-button>\r\n              <el-button type=\"danger\" onClick={ () => handler.delete(row.projectName) }>del</el-button>\r\n            </>\r\n          }}\r\n        />\r\n      </el-table>\r\n\r\n      <el-dialog v-model={state.dialogFormVisible} title=\"Create Project\" width=\"500\"\r\n        v-slots={{\r\n          footer: () => <>\r\n            <div class=\"dialog-footer\">\r\n              <el-button onClick={() => handler.handleDialog(false)}>Cancel</el-button>\r\n              <el-button type=\"primary\" onClick={handler.handleCreate}>\r\n                Confirm\r\n              </el-button>\r\n            </div>\r\n          </>\r\n        }}\r\n      >\r\n        <el-form model={state.formData} label-width={140} rules={state.rules} v-loading={ state.loading.formLoading }>\r\n          <el-form-item label=\"Project Name\" prop=\"projectName\">\r\n            <el-input v-model={state.formData.projectName} clearable />\r\n          </el-form-item>\r\n          <el-form-item label=\"Target Url\" prop=\"targetUrl\" >\r\n            <el-input v-model={state.formData.targetUrl} clearable />\r\n          </el-form-item>\r\n          <el-form-item label=\"Target Url\" prop=\"branch\" >\r\n            <el-input v-model={state.formData.branch} clearable />\r\n          </el-form-item>\r\n          <el-form-item label=\"Use Git Config\" prop=\"useToken\" >\r\n            <el-checkbox v-model={state.formData.useToken}></el-checkbox>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-dialog>\r\n      \r\n      { state.buildDailogVisible && (\r\n        <Build\r\n          buildDailogVisible={ state.buildDailogVisible }\r\n          projectName={ state.buildProjectName.projectName }\r\n          branch={ state.buildProjectName.branch }\r\n          onCloseDialog={ handler.closeBuildDialog }\r\n        />\r\n      ) }\r\n\r\n      { state.tagsDialog && (\r\n        <TagsDialog\r\n          tagsDialog={ state.tagsDialog }\r\n          tagsProjectName={ state.tagsProjectName }\r\n          onCloseDialog={ () => state.tagsDialog = false }\r\n        />\r\n      ) }\r\n      \r\n    </div>\r\n  }\r\n})","import { defineComponent, onMounted, ref } from \"vue\";\r\n\r\nexport default defineComponent({\r\n\r\n  props: {\r\n    dialogFormVisible: { type: Boolean, default: false },\r\n    projectName: { type: String }\r\n  },\r\n\r\n  emits: {\r\n    closeDialog: () => true\r\n  },\r\n\r\n  setup(props, { emit }) {\r\n\r\n    const logContent = ref<string>('')\r\n    const eventSourceRef = ref<EventSource | null>(null)\r\n\r\n    onMounted(() => {\r\n      const eventSource =\r\n        eventSourceRef.value =\r\n        new EventSource(`${process.env.NODE_ENV === 'development' ? '/api' : ''}/get_log?projectName=${props.projectName}`)\r\n\r\n      eventSource.onmessage = (event) => {\r\n        logContent.value = `${event.data}`.replace(/<br>/g, '\\n')\r\n      }\r\n\r\n      eventSource.onerror = () => {\r\n        logContent.value = 'error'\r\n      }\r\n    })\r\n\r\n    const handler = {\r\n      closeDialog: () => {\r\n        eventSourceRef.value?.close()\r\n\r\n        emit('closeDialog')\r\n      }\r\n    }\r\n\r\n    return () => (\r\n      <el-dialog v-model={props.dialogFormVisible} title=\"Build Logs\" width=\"80%\" top=\"5vh\"\r\n        before-close={handler.closeDialog}\r\n        v-slots={{\r\n          footer: () => <>\r\n            <div class=\"dialog-footer\">\r\n              <el-button onClick={handler.closeDialog}>Cancel</el-button>\r\n            </div>\r\n          </>\r\n        }}\r\n      >\r\n        <el-input type=\"textarea\" v-model={logContent.value} rows={30} readonly></el-input>\r\n      </el-dialog>\r\n    )\r\n  }\r\n})","import { defineComponent, onMounted, reactive } from \"vue\";\r\nimport { delTagByName, getTags } from '../api'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default defineComponent({\r\n\r\n  props: {\r\n    tagsProjectName: { type: String },\r\n    tagsDialog: { type: Boolean }\r\n  },\r\n\r\n  emits: {\r\n    closeDialog: () => true\r\n  },\r\n\r\n  setup(props, { emit }) {\r\n\r\n    const state = reactive({\r\n      tableData: [],\r\n      loading: false\r\n    } as {\r\n      tableData: Record<string, string>[]\r\n      loading: boolean\r\n    })\r\n\r\n    const handler = {\r\n      closeDialog: () => emit('closeDialog'),\r\n\r\n      delete: (tagName: string) => {\r\n        state.loading = true\r\n        delTagByName<{}>(tagName)\r\n          .then(res => {\r\n            ElMessage({ message: 'success!!', type: 'success' })\r\n            state.loading = false\r\n\r\n            methods.fetchData()\r\n          })\r\n          .catch(() => ( state.loading = false ))\r\n      }\r\n    }\r\n\r\n    const methods = {\r\n      fetchData() {\r\n        state.loading = true\r\n        \r\n        getTags<string[]>(props.tagsProjectName!)\r\n          .then(res => {\r\n\r\n            state.tableData = res.data.content.map(c => {\r\n              const item = c.split('-')\r\n\r\n              return {\r\n                tagName: props.tagsProjectName!,\r\n                branch: item[item.length - 2],\r\n                commitId: item[item.length - 1],\r\n              }\r\n            })\r\n            \r\n            state.loading = false\r\n          })\r\n          .catch(() => ( state.loading = false ))\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      methods.fetchData()\r\n    })\r\n\r\n    return () => (\r\n      <el-dialog v-model={props.tagsDialog} title={`${props.tagsProjectName} Termianl`} width=\"50%\" top=\"5vh\"\r\n        before-close={handler.closeDialog}\r\n        v-slots={{\r\n          footer: () => <>\r\n            <div class=\"dialog-footer\">\r\n              <el-button onClick={handler.closeDialog}>Cancel</el-button>\r\n            </div>\r\n          </>\r\n        }}\r\n      >\r\n        <el-table\r\n          data={ state.tableData }\r\n          v-loading={ state.loading }\r\n          border\r\n          height=\"250\"\r\n        >\r\n          <el-table-column prop=\"tagName\" label=\"Tag Name\" />\r\n          <el-table-column prop=\"branch\" label=\"Branch\" width=\"140\" />\r\n          <el-table-column prop=\"commitId\" label=\"CommitId\" />\r\n          <el-table-column label=\"Operation\" width=\"100\"\r\n          v-slots={{\r\n            default: ({ row }:  { row: any } ) => <>\r\n              <el-button type=\"danger\" onClick={ () => handler.delete(`${row.tagName}-${row.branch}-${row.commitId}`) }>del</el-button>\r\n            </>\r\n          }}\r\n        />\r\n        </el-table>\r\n\r\n      </el-dialog>\r\n    )\r\n  }\r\n})"],"sourceRoot":""}