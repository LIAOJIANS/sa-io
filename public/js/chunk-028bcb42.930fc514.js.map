{"version":3,"sources":["webpack:///./src/hooks/useRefs.ts","webpack:///./src/views/build.tsx","webpack:///./src/views/list.tsx","webpack:///./src/views/logDialog.tsx"],"names":["useRefs","config","refs","shallowReactive","obj","key","undefined","onRef","refer","_isSlot","s","Object","prototype","toString","call","_isVNode","defineComponent","props","projectName","type","String","branch","buildDailogVisible","Boolean","default","emits","closeDialog","setup","emit","form","ElForm","state","reactive","formData","removeNm","install","shell","shellContent","pull","publish","pubTargetIp","pubTargetProt","pubTargetDir","pubTargetUser","pubTargetPwd","publishId","publishList","rules","required","message","trigger","logProjectName","dialogFormVisible","handler","getPublishList","then","res","data","content","closeLogDialog","publishChange","id","describe","right","find","c","build","_refs$form","validate","fild","ElMessage","getShellContent","apiGetShellContent","_slot","_createVNode","_Fragment","_resolveComponent","$event","width","color","_createTextVNode","map","item","footer","LogDialog","tableData","targetUrl","useToken","loading","formLoading","tabLoading","buildProjectName","handleCreate","methods","createProject","handleDialog","fetchData","catch","closeBuildDialog","flag","beforeBuild","row","delete","deleteProject","k","getProjects","onMounted","onClick","_withDirectives","_resolveDirective","Build","logContent","ref","eventSourceRef","eventSource","value","EventSource","onmessage","event","replace","onerror","_eventSourceRef$value","close"],"mappings":"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","file":"js/chunk-028bcb42.930fc514.js","sourcesContent":["import { Ref, shallowReactive } from \"vue\";\r\n\r\ntype RefValueType<V> = V extends { use: { ref: () => Ref<infer Refer | null> } } ? Refer :\r\n  V extends new (...args: any[]) => infer Refer ? Refer : V\r\n\r\nexport default function useRefs<T extends { [k: string]: any }>(config: T): {\r\n  refs: {\r\n    [k in keyof T]: RefValueType<T[k]> | null | undefined\r\n  },\r\n  onRef: {\r\n    [k in keyof T]: (val: any) => void\r\n  }\r\n} {\r\n  const refs = shallowReactive((() => {\r\n    const obj = {} as any\r\n\r\n    for (let key in config) {\r\n      obj[key] = undefined\r\n    }\r\n\r\n    return obj\r\n  })())\r\n\r\n  const onRef = (() => {\r\n    const obj = {} as any\r\n    for (let key in config) {\r\n      obj[key] = (refer: any) => { refs[key] = refer }\r\n    }\r\n    return obj\r\n  })()\r\n\r\n  return {\r\n    refs,\r\n    onRef\r\n  } as any\r\n}","import { defineComponent, reactive } from 'vue'\r\nimport { ElMessage, ElForm } from 'element-plus'\r\n\r\nimport { getShellContent as apiGetShellContent, build, getPublishList, publish } from '../api'\r\nimport LogDialog from './logDialog'\r\nimport useRefs from \"../hooks/useRefs\";\r\nimport { PublishItem } from './publishConfig';\r\n\r\nexport default defineComponent({\r\n\r\n  props: {\r\n    projectName: { type: String },\r\n    branch: { type: String },\r\n    buildDailogVisible: { type: Boolean, default: false }\r\n  },\r\n\r\n  emits: {\r\n    closeDialog: () => true\r\n  },\r\n\r\n  setup(props, { emit }) {\r\n\r\n    const { onRef, refs } = useRefs({\r\n      form: ElForm\r\n    })\r\n\r\n    const state = reactive({\r\n      formData: {\r\n        removeNm: true,\r\n        install: true,\r\n\r\n        branch: props.branch,\r\n\r\n        shell: false,\r\n        shellContent: '',\r\n\r\n        pull: true,\r\n\r\n        publish: false,\r\n        pubTargetIp: '',\r\n        pubTargetProt: '',\r\n        pubTargetDir: '',\r\n        pubTargetUser: '',\r\n        pubTargetPwd: '',\r\n\r\n        publishId: ''\r\n      },\r\n\r\n      publishList: [],\r\n\r\n      rules: {\r\n        branch: [{ required: true, message: 'Please enter the branch', trigger: 'change' }],\r\n        shellContent: [{ required: true, message: 'Please enter the shell content', trigger: 'change' }],\r\n        publishId: [{ required: true, message: 'Please select publish info', trigger: 'change' }],\r\n      },\r\n\r\n      logProjectName: '',\r\n      dialogFormVisible: false\r\n    })\r\n\r\n    const handler = {\r\n      getPublishList: () => {\r\n        getPublishList<[]>()\r\n          .then(res => {\r\n            state.publishList = res.data.content || []\r\n          })\r\n      },\r\n\r\n      closeDialog: () => {\r\n        emit('closeDialog')\r\n      },\r\n\r\n      closeLogDialog: () => {\r\n        state.dialogFormVisible = false\r\n      },\r\n\r\n      publishChange: () => {\r\n        if (state.formData.publish && state.formData.publishId) {\r\n          const {\r\n            id,\r\n            describe,\r\n            ...right\r\n          } = state.publishList.find((c: PublishItem) => c.id === state.formData.publishId) || {} as PublishItem\r\n\r\n          state.formData = {\r\n            ...state.formData,\r\n            ...right\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n      build: () => {\r\n        refs.form?.validate(fild => {\r\n          if (fild === true) {\r\n            build<string>({\r\n              ...state.formData,\r\n              projectName: props.projectName!\r\n            })\r\n              .then(res => {\r\n                ElMessage({\r\n                  type: 'success',\r\n                  message: res.data.message\r\n                })\r\n\r\n                state.logProjectName = res.data.content\r\n                state.dialogFormVisible = true\r\n              })\r\n          }\r\n        })\r\n\r\n      },\r\n\r\n      removeNm: () => {\r\n        if (state.formData.removeNm) {\r\n          state.formData.install = true\r\n        }\r\n      },\r\n\r\n      getShellContent: () => {\r\n        if (state.formData.shell) {\r\n          apiGetShellContent<string>(props.projectName!)\r\n            .then(res => {\r\n              state.formData.shellContent = res.data.content\r\n            })\r\n        }\r\n      }\r\n    }\r\n\r\n    return () => (\r\n      <>\r\n        <el-dialog v-model={props.buildDailogVisible} top=\"5vh\" width={800} title={`build ${props.projectName}`} v-slots={{\r\n          footer: () => <>\r\n            <div class=\"dialog-footer\">\r\n              <el-button onClick={handler.closeDialog}>Cancel</el-button>\r\n              <el-button type=\"primary\" onClick={handler.build}>\r\n                Build\r\n              </el-button>\r\n            </div>\r\n          </>\r\n        }}\r\n\r\n          before-close={handler.closeDialog}\r\n        >\r\n          <el-form ref={onRef.form} model={state.formData} label-width={180} rules={state.rules} style={{ width: '700px' }}>\r\n\r\n            <el-form-item label=\"remove node_modules\">\r\n              <el-checkbox v-model={state.formData.removeNm} onChange={handler.removeNm}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"is Install：\">\r\n              <el-checkbox v-model={state.formData.install} onChange={handler.removeNm}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"Branch\">\r\n              <el-input v-model={state.formData.branch}></el-input>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"is Pull\">\r\n              <el-checkbox v-model={state.formData.pull}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"is Shell：\">\r\n              <el-checkbox v-model={state.formData.shell} onChange={handler.getShellContent}></el-checkbox>\r\n            </el-form-item>\r\n\r\n            {\r\n              state.formData.shell && (\r\n                <el-form-item label=\"shell content：\" prop=\"shellContent\">\r\n                  <span style={{ color: 'red' }}>ps: custom shell scripts will completely overwrite built-in commands</span>\r\n                  <el-input type=\"textarea\" v-model={state.formData.shellContent} rows={20}></el-input>\r\n                </el-form-item>\r\n              )\r\n            }\r\n\r\n            <el-form-item label=\"is Publish：\">\r\n              <el-checkbox v-model={state.formData.publish} onChange={handler.getPublishList}></el-checkbox>\r\n            </el-form-item>\r\n            {\r\n              state.formData.publish && (\r\n                <>\r\n                  <el-form-item label=\"publish IP：\" prop=\"publishId\">\r\n                    <el-select\r\n                      v-model={state.formData.publishId} \r\n                      filterable \r\n                      clearable \r\n                      onChange={handler.publishChange}\r\n                      style={{  }}\r\n                    >\r\n                      {\r\n                        state.publishList.map((item: PublishItem) => (\r\n                          <el-option key={item.id} label={item.describe} value={item.id}></el-option>\r\n                        ))\r\n                      }\r\n                    </el-select>\r\n                  </el-form-item>\r\n                </>\r\n              )\r\n            }\r\n          </el-form>\r\n        </el-dialog>\r\n\r\n        {\r\n          state.dialogFormVisible && (\r\n            <LogDialog\r\n              dialogFormVisible={state.dialogFormVisible}\r\n              projectName={state.logProjectName}\r\n              onCloseDialog={handler.closeLogDialog}\r\n            />\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n})","import { defineComponent, onMounted, reactive } from \"vue\";\r\nimport { ElMessage } from \"element-plus\";\r\n\r\nimport { createProject, getProjects, deleteProject } from '../api'\r\nimport Build from './build'\r\n\r\nexport default defineComponent({\r\n  setup() {\r\n\r\n    const state = reactive({\r\n      tableData: [],\r\n\r\n      formData: {\r\n        projectName: '',\r\n        targetUrl: '',\r\n        useToken: true\r\n      },\r\n\r\n      loading: {\r\n        formLoading: false,\r\n        tabLoading: false\r\n      },\r\n\r\n      dialogFormVisible: false,\r\n      buildDailogVisible: false,\r\n      buildProjectName: {\r\n        projectName: '',\r\n        branch: ''\r\n      },\r\n\r\n      rules: {\r\n        projectName: [{ required: true, message: 'Please enter the git Project Name', trigger: 'change' }],\r\n        targetUrl: [{ required: true, message: 'Please enter the git Target Url', trigger: 'change', }]\r\n      }\r\n    })\r\n\r\n    const handler = {\r\n      handleCreate: () => {\r\n\r\n        methods.loading('form', true)\r\n\r\n        createProject(state.formData)\r\n          .then(() => {\r\n\r\n            ElMessage({ message: 'success!!', type: 'success' })\r\n\r\n            methods\r\n              .loading('form')\r\n\r\n            handler\r\n              .handleDialog(false)\r\n\r\n            methods\r\n              .fetchData()\r\n          })\r\n          .catch(() => methods.loading('form'))\r\n      },\r\n\r\n      closeBuildDialog: () => {\r\n        state.buildDailogVisible = false\r\n        \r\n        methods.fetchData()\r\n      },\r\n\r\n      handleDialog: (flag: boolean) => state.dialogFormVisible = flag,\r\n\r\n      beforeBuild: (row: { projectName: string, branch: string }) => {\r\n        \r\n        state.buildProjectName = row\r\n        state.buildDailogVisible = true\r\n      },\r\n\r\n      delete: (projectName: string) => {\r\n        methods.loading('tab', true)\r\n\r\n        deleteProject(projectName)\r\n          .then(() => {\r\n            methods.loading('tab')\r\n\r\n            methods.fetchData()\r\n          })\r\n          .catch(() => methods.loading('tab'))\r\n      }\r\n    }\r\n\r\n    const methods = {\r\n      loading: (k: string, flag: boolean = false) => {\r\n        const key = `${k}Loading`\r\n\r\n        state.loading[key as keyof { formLoading: boolean, tabLoading: boolean }] = flag\r\n      },\r\n\r\n      fetchData: () => {\r\n        methods.loading('tab', true)\r\n\r\n      getProjects<[]>()\r\n        .then(res => {\r\n\r\n          state.tableData = res.data.content || []\r\n          methods.loading('tab')\r\n\r\n        })\r\n        .catch(() => methods.loading('tab'))\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      methods\r\n        .fetchData()\r\n      \r\n    })\r\n\r\n    return () => <div>\r\n      <el-button type=\"primary\" onClick={() => handler.handleDialog(true)}>add</el-button>\r\n      <el-table data={state.tableData} v-loading={ state.loading.tabLoading }>\r\n        <el-table-column prop=\"projectName\" label=\"Project Name\"  width=\"300\"/>\r\n        <el-table-column prop=\"branch\" label=\"Branch\"  width=\"100\"/>\r\n        <el-table-column prop=\"targetUrl\" label=\"Target Url\" />\r\n        <el-table-column label=\"operation\" width=\"180\"\r\n          v-slots={{\r\n            default: ({ row }:  { row: any } ) => <>\r\n              <el-button type=\"primary\" onClick={ () => handler.beforeBuild(row) }>build</el-button>\r\n              <el-button type=\"danger\" onClick={ () => handler.delete(row.projectName) }>del</el-button>\r\n            </>\r\n          }}\r\n        />\r\n      </el-table>\r\n\r\n      <el-dialog v-model={state.dialogFormVisible} title=\"Create Project\" width=\"500\"\r\n        v-slots={{\r\n          footer: () => <>\r\n            <div class=\"dialog-footer\">\r\n              <el-button onClick={() => handler.handleDialog(false)}>Cancel</el-button>\r\n              <el-button type=\"primary\" onClick={handler.handleCreate}>\r\n                Confirm\r\n              </el-button>\r\n            </div>\r\n          </>\r\n        }}\r\n      >\r\n        <el-form model={state.formData} label-width={140} rules={state.rules} v-loading={ state.loading.formLoading }>\r\n          <el-form-item label=\"Project Name\" prop=\"projectName\">\r\n            <el-input v-model={state.formData.projectName} clearable />\r\n          </el-form-item>\r\n          <el-form-item label=\"Target Url\" prop=\"targetUrl\" >\r\n            <el-input v-model={state.formData.targetUrl} clearable />\r\n          </el-form-item>\r\n          <el-form-item label=\"Use Git Config\" prop=\"useToken\" >\r\n            <el-checkbox v-model={state.formData.useToken}></el-checkbox>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-dialog>\r\n      \r\n      { state.buildDailogVisible && (\r\n        <Build\r\n          buildDailogVisible={ state.buildDailogVisible }\r\n          projectName={ state.buildProjectName.projectName }\r\n          branch={ state.buildProjectName.branch }\r\n          onCloseDialog={ handler.closeBuildDialog }\r\n        />\r\n      ) }\r\n      \r\n    </div>\r\n  }\r\n})","import { defineComponent, onMounted, ref } from \"vue\";\r\n\r\nexport default defineComponent({\r\n\r\n  props: {\r\n    dialogFormVisible: { type: Boolean, default: false },\r\n    projectName: { type: String }\r\n  },\r\n\r\n  emits: {\r\n    closeDialog: () => true\r\n  },\r\n\r\n  setup(props, { emit }) {\r\n\r\n    const logContent = ref<string>('')\r\n    const eventSourceRef = ref<EventSource | null>(null)\r\n\r\n    onMounted(() => {\r\n      const eventSource =\r\n        eventSourceRef.value =\r\n        new EventSource(`${process.env.NODE_ENV === 'development' ? '/api' : ''}/get_log?projectName=${props.projectName}`)\r\n\r\n      eventSource.onmessage = (event) => {\r\n        logContent.value = `${event.data}`.replace(/<br>/g, '\\n')\r\n      }\r\n\r\n      eventSource.onerror = () => {\r\n        logContent.value = 'error'\r\n      }\r\n    })\r\n\r\n    const handler = {\r\n      closeDialog: () => {\r\n        eventSourceRef.value?.close()\r\n\r\n        emit('closeDialog')\r\n      }\r\n    }\r\n\r\n    return () => (\r\n      <el-dialog v-model={props.dialogFormVisible} title=\"Build Logs\" width=\"80%\" top=\"5vh\"\r\n        before-close={handler.closeDialog}\r\n        v-slots={{\r\n          footer: () => <>\r\n            <div class=\"dialog-footer\">\r\n              <el-button onClick={handler.closeDialog}>Cancel</el-button>\r\n            </div>\r\n          </>\r\n        }}\r\n      >\r\n        <el-input type=\"textarea\" v-model={logContent.value} rows={30} readonly></el-input>\r\n      </el-dialog>\r\n    )\r\n  }\r\n})"],"sourceRoot":""}