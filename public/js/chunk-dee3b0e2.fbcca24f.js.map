{"version":3,"sources":["webpack:///./src/hooks/useRefs.ts","webpack:///./src/views/gitToken.tsx"],"names":["useRefs","config","refs","shallowReactive","obj","key","undefined","onRef","refer","defineComponent","setup","state","reactive","formData","token","username","rules","required","message","trigger","loading","form","ElForm","handle","submit","_refs$form","validate","fild","setGitInfo","then","res","ElMessage","type","catch","onMounted","getGitInfo","data","content","_createVNode","_withDirectives","_resolveComponent","width","default","$event","_resolveDirective","textAlign","_createTextVNode"],"mappings":"kHAAA,kDAKc,SAAUA,EAAwCC,GAQ9D,MAAMC,EAAOC,6BAAgB,MAC3B,MAAMC,EAAM,GAEZ,IAAK,IAAIC,KAAOJ,EACdG,EAAIC,QAAOC,EAGb,OAAOF,GAPoB,IAUvBG,EAAQ,MACZ,MAAMH,EAAM,GACZ,IAAK,IAAIC,KAAOJ,EACdG,EAAIC,GAAQG,IAAiBN,EAAKG,GAAOG,GAE3C,OAAOJ,GALK,GAQd,MAAO,CACLF,OACAK,W,2GC3BWE,0CAAgB,CAC7BC,QAEE,MAAMC,EAAQC,sBAAS,CACrBC,SAAU,CACRC,MAAO,GACPC,SAAU,IAGZC,MAAO,CACLD,SAAU,CAAC,CAAEE,UAAU,EAAMC,QAAS,gCAAiCC,QAAS,WAChFL,MAAO,CAAC,CAAEG,UAAU,EAAMC,QAAS,6BAA8BC,QAAS,YAG5EC,SAAS,KAGL,MAAEb,EAAK,KAAEL,GAASF,eAAQ,CAC9BqB,KAAMC,SAGFC,EAAS,CACbC,OAAQA,KAAK,IAAAC,EACF,QAATA,EAAAvB,EAAKmB,YAAI,IAAAI,GAATA,EAAWC,SAASC,KACL,IAATA,IACFhB,EAAMS,SAAU,EAChBQ,eAAWjB,EAAME,UACdgB,KAAKC,IACJC,eAAU,CAAEb,QAAS,YAAac,KAAM,YACxCrB,EAAMS,SAAU,IAEjBa,MAAM,IAAOtB,EAAMS,SAAU,QAcxC,OARAc,uBAAU,KAERC,iBACGN,KAAKC,IACJnB,EAAME,SAAWiB,EAAIM,KAAKC,YAIzB,IAAAC,yBAAC,MAAD,MAAAC,4BAAAD,yBAAAE,8BAAC,WAAD,OAGI7B,EAAME,SAAQ,MACdF,EAAMK,MAAK,2BAEX,CAAEyB,MAAO,SAAS,IACpBlC,EAAMc,MAAI,CAAAqB,YAAA,CAAAJ,yBAAAE,8BAAA,oDAAAE,YAAA,CAAAJ,yBAAAE,8BAAA,wBAGM7B,EAAME,SAASE,SAAQ,sBAAA4B,GAAvBhC,EAAME,SAASE,SAAQ4B,EAAA,uBAAAL,yBAAAE,8BAAA,8CAAAE,YAAA,CAAAJ,yBAAAE,8BAAA,wBAGvB7B,EAAME,SAASC,MAAK,sBAAA6B,GAApBhC,EAAME,SAASC,MAAK6B,EAAA,+BAAAC,8BAAA,WAX9BjC,EAAMS,WAAOkB,yBAAA,aAed,CAAEO,UAAW,SAAUJ,MAAO,UAAS,CAAAH,yBAAAE,8BAAA,oDAEJjB,EAAOC,QAAM,CAAAkB,YAAA,CAAAI,6BAAA","file":"js/chunk-dee3b0e2.fbcca24f.js","sourcesContent":["import { Ref, shallowReactive } from \"vue\";\r\n\r\ntype RefValueType<V> = V extends { use: { ref: () => Ref<infer Refer | null> } } ? Refer :\r\n  V extends new (...args: any[]) => infer Refer ? Refer : V\r\n\r\nexport default function useRefs<T extends { [k: string]: any }>(config: T): {\r\n  refs: {\r\n    [k in keyof T]: RefValueType<T[k]> | null | undefined\r\n  },\r\n  onRef: {\r\n    [k in keyof T]: (val: any) => void\r\n  }\r\n} {\r\n  const refs = shallowReactive((() => {\r\n    const obj = {} as any\r\n\r\n    for (let key in config) {\r\n      obj[key] = undefined\r\n    }\r\n\r\n    return obj\r\n  })())\r\n\r\n  const onRef = (() => {\r\n    const obj = {} as any\r\n    for (let key in config) {\r\n      obj[key] = (refer: any) => { refs[key] = refer }\r\n    }\r\n    return obj\r\n  })()\r\n\r\n  return {\r\n    refs,\r\n    onRef\r\n  } as any\r\n}","import { defineComponent, onMounted, reactive } from \"vue\";\r\nimport { ElMessage, ElForm } from \"element-plus\";\r\n\r\nimport { getGitInfo, setGitInfo } from '../api'\r\nimport useRefs from \"../hooks/useRefs\";\r\n\r\nexport default defineComponent({\r\n  setup() {\r\n\r\n    const state = reactive({\r\n      formData: {\r\n        token: '',\r\n        username: ''\r\n      },\r\n\r\n      rules: {\r\n        username: [{ required: true, message: 'Please enter the git username', trigger: 'change' }],\r\n        token: [{ required: true, message: 'Please enter the git token', trigger: 'change', }]\r\n      },\r\n\r\n      loading: false\r\n    })\r\n\r\n    const { onRef, refs } = useRefs({\r\n      form: ElForm\r\n    })\r\n\r\n    const handle = {\r\n      submit: () => {\r\n        refs.form?.validate(fild => {\r\n          if (fild === true) {\r\n            state.loading = true\r\n            setGitInfo(state.formData)\r\n              .then(res => {\r\n                ElMessage({ message: 'success!!', type: 'success' })\r\n                state.loading = false\r\n              })\r\n              .catch(() => (state.loading = false))\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n\r\n      getGitInfo<{ username: string, token: string }>()\r\n        .then(res => {\r\n          state.formData = res.data.content\r\n        })\r\n    })\r\n\r\n    return () => <div>\r\n      <el-form\r\n        v-loading={state.loading}\r\n        model={state.formData}\r\n        rules={state.rules}\r\n        label-width=\"auto\"\r\n        style={{ width: '600px' }}\r\n        ref={onRef.form}\r\n      >\r\n        <el-form-item label=\"username\" prop=\"username\">\r\n          <el-input v-model={state.formData.username} clearable />\r\n        </el-form-item>\r\n        <el-form-item label=\"Token\" prop=\"token\">\r\n          <el-input v-model={state.formData.token} type=\"textarea\" />\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <div style={{ textAlign: 'center', width: '600px' }}>\r\n\r\n        <el-button el-button type=\"primary\" onClick={handle.submit}>保存</el-button>\r\n      </div>\r\n    </div>\r\n  }\r\n})"],"sourceRoot":""}